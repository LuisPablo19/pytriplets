# Expected Return of each asset
ER = exp(colMeans(r,na.rm=TRUE)) - 1
ER
# expected return of the 100 portfolios
ERPortfolios = t(W) %*% ER
# expected risk of the 100 portfolios
VARPortfolios = diag(t(W) %*% COV %*% W)
# correlation matrix
COV = var(r,na.rm=TRUE)
COV
# expected return of the 100 portfolios
ERPortfolios = t(W) %*% ER
# expected risk of the 100 portfolios
VARPortfolios = diag(t(W) %*% COV %*% W)
RISKPortfolios = sqrt(VARPortfolios)
library(IntroCompFinR)
GMVPort = globalMin.portfolio(ER,COV)
GMVPort
GMVPort = globalMin.portfolio(ER,COV, shorts = FALSE)
GMVPort
# To clear our environment we use the remove function rm:
rm(list=ls())
# To avoid scientific notation for numbers:
options(scipen=999)
library(quantmod)
rm(list=ls())
tickers = c("ABC","ADP","MRK","PFE","AGM","PG","MSFT","JNJ","KO","WMT")
getSymbols(Symbols = tickers, periodicity="monthly",from="2017-12-01", to="2022-10-31")
datasets_list <- lapply(tickers, get)
# Merging the datasets:
prices <- do.call(merge, datasets_list)
# We select only Adjusted prices:
prices <- Ad(prices)
# We change the name of the columns to be equal to the tickers vector:
names(prices) = tickers
#Calculating continuously compounded returns:
r = diff(log(prices))
# Initialize the Weight matrix
W = c()
# Create 10 vectors of 100 random values from 0 to 1:
for(i in 1:10) {
W = rbind(W,runif(100))
}
# I first create a vector with the sum of weights for all portfolios:
sumw <- colSums(W)
# I do another loop to divide each weight by the sum of weights:
for(i in 1:10)  {
W[i,]<-W[i,]/sumw
}
# I check that the sum of weights is 1 (I do this for 5 portfolios)
W[,1:5]
colSums(W[,1:5])
# Expected Return of each asset
ER = exp(colMeans(r,na.rm=TRUE)) - 1
ER
# correlation matrix
COV = var(r,na.rm=TRUE)
COV
# expected return of the 100 portfolios
ERPortfolios = t(W) %*% ER
# expected risk of the 100 portfolios
VARPortfolios = diag(t(W) %*% COV %*% W)
RISKPortfolios = sqrt(VARPortfolios)
plot(x=RISKPortfolios,y= ERPortfolios,xlabel="Portfolio Expected Risk", ylabel="Portfolio Expected Return")
library(IntroCompFinR)
GMVPort = globalMin.portfolio(ER,COV)
GMVPort
GMVPort = globalMin.portfolio(ER,COV, shorts = FALSE)
GMVPort
table.Stats(r)
efrontier <- efficient.frontier(ER, COV, nport = 100,
alpha.min = -0.5,
alpha.max = 1.5, shorts = FALSE )
plot(efrontier, plot.assets=TRUE, col="blue")
port100= cbind (efrontier[[2]],efrontier[[3]],efrontier[[4]])
# We change the name of the columns
colnames(port100)[1] <- "ER"
colnames(port100)[2] <- "SD"
port100
rfree = 0
optPort = tangency.portfolio(ER, COV,rfree, shorts=FALSE)
optPort
plot(efrontier, plot.assets=TRUE, col="blue", pch=16)
points(GMVPort$sd, GMVPort$er, col="green", pch=16, cex=2)
points(optPort$sd, optPort$er, col="red", pch=16, cex=2)
text(GMVPort$sd, GMVPort$er, labels="GLOBAL MIN", pos=2)
text(optPort$sd, optPort$er, labels="TANGENCY", pos=2)
SharpeRatio = (optPort$er - rfree)/optPort$sd
abline(a=rfree, b=SharpeRatio, col="green", lwd=2)
#matrix to data frame
Matdf =as.data.frame(port100)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, GOOGL, PFE, AGM, PG, MSFT, JNJ, AMZN, WMT) %>%
filter(ER<=0.01)
Matdf
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, KO, WMT) %>%
filter(ER<=0.01)
head(conseport)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, KO, WMT) %>%
filter(ER<=0.1)
head(conseport)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, KO, WMT) %>%
filter(ER<=1%)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, KO, WMT) %>%
filter(ER<=0.1)
head(conseport)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, KO, WMT) %>%
filter(ER<=0.01)
head(conseport)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, KO, WMT) %>%
filter(ER<=0.1)
head(conseport)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, KO, WMT) %>%
filter(ER<0.1)
head(conseport)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, KO, WMT) %>%
filter(ER<0.1)
head(1)
conseport
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, KO, WMT) %>%
filter(ER<0.1)
head(1)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, MCD, WMT) %>%
filter(ER<0.1)
# To clear our environment we use the remove function rm:
rm(list=ls())
# To avoid scientific notation for numbers:
options(scipen=999)
library(quantmod)
rm(list=ls())
tickers = c("WMT","TSLA")
getSymbols(Symbols = tickers, periodicity="monthly",from="2018-01-01", to="2022-10-31")
datasets_list <- lapply(tickers, get)
prices <- do.call(merge, datasets_list)
# We select only Adjusted prices:
prices <- Ad(prices)
# We change the name of the columns to be equal to the tickers vector:
names(prices) = tickers
firstprices = as.vector(prices[1,])
HPR = sweep(prices,2,firstprices,'/') - 1
#Also, the HPR can be calculated in the prices dataset as:
#prices$HPRWMT = prices$WMT / as.numeric(prices$WMT[1]) - 1
#prices$HPRTSLA = prices$TSLA / as.numeric(prices$TSLA[1]) - 1
w1 = 0.70
w2 = 0.30
HPR$Port = w1 * HPR$WMT + w2 * HPR$TSLA
plot(HPR$Port)
HPR$invport = 1 * (1+HPR$Port)
plot(HPR$invport)
library(PerformanceAnalytics)
# I create a vector with the portfolio weights:
w = c(w1,w2)
# I create the monthly return for each stock:
R = prices / lag(prices,1) - 1
# I calculate the portfolio historical returns using the weight vector and the stock historical returns:
PR <- Return.portfolio(R,weights=w)
# The charts.PerformanceSummary function calculates and plots the $1.0 performance invested in the portfolio:
charts.PerformanceSummary(PR,
main = "Performance of $1.00 over time",
wealth.index = TRUE)
pr = log(1+PR$portfolio.returns)
returns_statistics = table.Stats(pr)
returns_statistics
returns_statistics["Stdev",]
portfolio_volatility = sd(pr,na.rm = TRUE)
portfolio_volatility
portfolio_mean_return = mean(pr,na.rm=TRUE)
portfolio_mean_return
chart.Boxplot(PR)
chart.Boxplot(merge(R,PR))
annual_portfolio_mean_return = 12 * portfolio_mean_return
annual_portfolio_mean_return
annual_portfolio_volatility = sqrt(12) * portfolio_volatility
annual_portfolio_volatility
#Calculating continuously compounded returns:
r = diff(log(prices))
ccmean_returns  = colMeans(r,na.rm=TRUE)
ER = exp(ccmean_returns) - 1
ER
w1 = 0.7
w2 = 0.3
ER_Portfolio = w1 * ER[1] + w2 * ER[2]
#  ER is a vector of 2 numbers: the expected return of stock 1 and the expected return of stock 2
names(ER_Portfolio)=c("ER_Portfolio")
ER_Portfolio
# We set a vector composed of the asset weights:
W = c(w1,w2)
# We multiply the transpose of the weight vector times the vector of expected returns
ER_portfolio = t(W) %*% ER
ER_portfolio
VAR1 = var(r$WMT,na.rm=TRUE)
VAR2 = var(r$TSLA,na.rm=TRUE)
COV = var(x=r$WMT,y=r$TSLA,na.rm=TRUE)
VarPortfolio = w1^2 * VAR1 + w2^2 * VAR2 + 2*w1*w2*COV
VarPortfolio
# We calculate the Variance-Covariance matrix with the var function:
COV =var(r,na.rm=TRUE)
# Note var function calculates the variance-covariance matrix if r has more than 1 column.
# If r has only 1 column, then var calculates only the variance of that column.
COV
VarPortfolio = t(W) %*% COV %*% W
VarPortfolio
CORR = cov2cor(COV)
CORR
PortRisk = sqrt(VarPortfolio[1,1])
PortRisk
AnnualPortRisk = sqrt(12) * PortRisk
AnnualPortRisk
# I first create a vector for the weights of the first stock:
w1= seq(from=0,to=1,by=0.1)
w1
# The weight vector for stock 2 is just the complement of w1:
w2 = 1 - w1
w2
# I construct the weight matrix with the cbind function:
W = rbind(w1,w2)
W
# I compute the expected return of the 11 portfolios:
ERPortfolios = t(W) %*% ER
VARPortfolios = t(W) %*% COV %*% W
VARPortfolios = diag(VARPortfolios)
VARPortfolios
RISKPortfolios = sqrt(VARPortfolios)
RISKPortfolios
plot(x=RISKPortfolios,y= ERPortfolios,
xlabel="Portfolio Expected Risk", ylabel="Portfolio Expected Return")
text(x=RISKPortfolios,y= ERPortfolios,
labels=w1, cex=0.7, pos=3)
tickers = c("WMT","TSLA","ORCL","FCX")
getSymbols(Symbols = tickers, periodicity="monthly",from="2018-01-01", to="2022-10-31")
datasets_list <- lapply(tickers, get)
# Merging the datasets:
prices <- do.call(merge, datasets_list)
# We select only Adjusted prices:
prices <- Ad(prices)
# We change the name of the columns to be equal to the tickers vector:
names(prices) = tickers
#Calculating continuously compounded returns:
r = diff(log(prices))
# Initialize the Weight matrix
W = c()
# Create 4 vectors of 1000 random values from 0 to 1:
for(i in 1:4) {
W = rbind(W,runif(1000))
}
# The problem I have now is that some of the 1,000 portfolios
#  might end up having a sum of weights higher than one.
# I can do a simple "trick" by
#   dividing each of the 4 weights by the sum of these 4
#   weights. And I can do this # for all 1000 portfolios:
# I first create a vector with the sum of weights for all portfolios:
sumw <- colSums(W)
# I do another loop to divide each weight by the sum of weights:
for(i in 1:4)  {
W[i,]<-W[i,]/sumw
# In each iteration I divide one raw of W2 by the vector sumw,
#  which is the sum of the weights of all 1000 portfolios
}
# I check that the sum of weights is 1 (I do this for 5 portfolios)
W[,1:5]
colSums(W[,1:5])
# All sums are equal to 1, as expected
# Then each column of this matrix represents a random portfolio without allowing for short sales.
ER = exp(colMeans(r,na.rm=TRUE)) - 1
ER
COV = var(r,na.rm=TRUE)
COV
CORR = cov2cor(COV)
CORR
ERPortfolios = t(W) %*% ER
VARPortfolios = diag(t(W) %*% COV %*% W)
RISKPortfolios = sqrt(VARPortfolios)
plot(x=RISKPortfolios,y= ERPortfolios,
xlabel="Portfolio Expected Risk", ylabel="Portfolio Expected Return")
library(IntroCompFinR)
GMVPort = globalMin.portfolio(ER,COV)
GMVPort
GMVPort = globalMin.portfolio(ER,COV, shorts = FALSE)
GMVPort
table.Stats(r)
# efficient frontier
efrontier <- efficient.frontier(ER, COV, nport = 100,
alpha.min = -0.5,
alpha.max = 1.5, shorts = FALSE)
plot(efrontier, plot.assets=TRUE, col="blue")
rfree = 0
tangentPort = tangency.portfolio(ER, COV,rfree, shorts=FALSE)
tangentPort
tangentPortWeights = getPortfolio(ER, COV, weights=tangentPort$weights)
plot(tangentPortWeights, col="blue")
plot(efrontier, plot.assets=TRUE, col="blue", pch=16)
points(GMVPort$sd, GMVPort$er, col="green", pch=16, cex=2)
points(tangentPort$sd, tangentPort$er, col="red", pch=16, cex=2)
text(GMVPort$sd, GMVPort$er, labels="GLOBAL MIN", pos=2)
text(tangentPort$sd, tangentPort$er, labels="TANGENCY", pos=2)
SharpeRatio = (tangentPort$er - rfree)/tangentPort$sd
abline(a=rfree, b=SharpeRatio, col="green", lwd=2)
# To clear our environment we use the remove function rm:
rm(list=ls())
# To avoid scientific notation for numbers:
options(scipen=999)
library(quantmod)
rm(list=ls())
tickers = c("ABC","ADP","MRK","PFE","AGM","PG","MSFT","JNJ","MCD","WMT")
getSymbols(Symbols = tickers, periodicity="monthly",from="2017-12-01", to="2022-10-31")
datasets_list <- lapply(tickers, get)
# Merging the datasets:
prices <- do.call(merge, datasets_list)
# We select only Adjusted prices:
prices <- Ad(prices)
# We change the name of the columns to be equal to the tickers vector:
names(prices) = tickers
#Calculating continuously compounded returns:
r = diff(log(prices))
# Initialize the Weight matrix
W = c()
# Create 10 vectors of 100 random values from 0 to 1:
for(i in 1:10) {
W = rbind(W,runif(100))
}
# I first create a vector with the sum of weights for all portfolios:
sumw <- colSums(W)
# I do another loop to divide each weight by the sum of weights:
for(i in 1:10)  {
W[i,]<-W[i,]/sumw
}
# I check that the sum of weights is 1 (I do this for 5 portfolios)
W[,1:5]
colSums(W[,1:5])
# Expected Return of each asset
ER = exp(colMeans(r,na.rm=TRUE)) - 1
ER
# correlation matrix
COV = var(r,na.rm=TRUE)
COV
# expected return of the 100 portfolios
ERPortfolios = t(W) %*% ER
# expected risk of the 100 portfolios
VARPortfolios = diag(t(W) %*% COV %*% W)
RISKPortfolios = sqrt(VARPortfolios)
plot(x=RISKPortfolios,y= ERPortfolios,xlabel="Portfolio Expected Risk", ylabel="Portfolio Expected Return")
library(IntroCompFinR)
GMVPort = globalMin.portfolio(ER,COV)
GMVPort
GMVPort = globalMin.portfolio(ER,COV, shorts = FALSE)
GMVPort
table.Stats(r)
efrontier <- efficient.frontier(ER, COV, nport = 100,
alpha.min = -0.5,
alpha.max = 1.5, shorts = FALSE )
plot(efrontier, plot.assets=TRUE, col="blue")
port100= cbind (efrontier[[2]],efrontier[[3]],efrontier[[4]])
# We change the name of the columns
colnames(port100)[1] <- "ER"
colnames(port100)[2] <- "SD"
port100
rfree = 0
optPort = tangency.portfolio(ER, COV,rfree, shorts=FALSE)
optPort
plot(efrontier, plot.assets=TRUE, col="blue", pch=16)
points(GMVPort$sd, GMVPort$er, col="green", pch=16, cex=2)
points(optPort$sd, optPort$er, col="red", pch=16, cex=2)
text(GMVPort$sd, GMVPort$er, labels="GLOBAL MIN", pos=2)
text(optPort$sd, optPort$er, labels="TANGENCY", pos=2)
SharpeRatio = (optPort$er - rfree)/optPort$sd
abline(a=rfree, b=SharpeRatio, col="green", lwd=2)
#matrix to data frame
Matdf =as.data.frame(port100)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, MCD, WMT) %>%
filter(ER<0.1)
head(conseport, n=1)
aggport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, MCD, WMT) %>%
filter(SD<0.4)
head(aggport, n=1)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, MCD, WMT) %>%
filter(ER<0.1)
head(conseport)
conseport<-Matdf%>%
select(ER, SD, ABC, ADP, MRK, PFE, AGM, PG, MSFT, JNJ, MCD, WMT) %>%
filter(ER<0.1)
head(conseport, n=1)
conseport<-Matdf%>%
filter(ER<0.1)
head(conseport, n=1)
aggport<-Matdf%>%
filter(SD<0.4)
head(aggport, n=1)
conseport<-Matdf%>%
filter(conseport$SD<0.1)
head(conseport, n=1)
# To clear our environment we use the remove function rm:
rm(list=ls())
# To avoid scientific notation for numbers:
options(scipen=999)
library(quantmod)
rm(list=ls())
tickers = c("ABC","ADP","MRK","PFE","AGM","PG","MSFT","JNJ","NFLX","WMT")
getSymbols(Symbols = tickers, periodicity="monthly",from="2017-12-01", to="2022-10-31")
datasets_list <- lapply(tickers, get)
# Merging the datasets:
prices <- do.call(merge, datasets_list)
# We select only Adjusted prices:
prices <- Ad(prices)
# We change the name of the columns to be equal to the tickers vector:
names(prices) = tickers
#Calculating continuously compounded returns:
r = diff(log(prices))
# Initialize the Weight matrix
W = c()
# Create 10 vectors of 100 random values from 0 to 1:
for(i in 1:10) {
W = rbind(W,runif(100))
}
# I first create a vector with the sum of weights for all portfolios:
sumw <- colSums(W)
# I do another loop to divide each weight by the sum of weights:
for(i in 1:10)  {
W[i,]<-W[i,]/sumw
}
# I check that the sum of weights is 1 (I do this for 5 portfolios)
W[,1:5]
colSums(W[,1:5])
# Expected Return of each asset
ER = exp(colMeans(r,na.rm=TRUE)) - 1
ER
# correlation matrix
COV = var(r,na.rm=TRUE)
COV
# expected return of the 100 portfolios
ERPortfolios = t(W) %*% ER
# expected risk of the 100 portfolios
VARPortfolios = diag(t(W) %*% COV %*% W)
RISKPortfolios = sqrt(VARPortfolios)
plot(x=RISKPortfolios,y= ERPortfolios,xlabel="Portfolio Expected Risk", ylabel="Portfolio Expected Return")
library(IntroCompFinR)
GMVPort = globalMin.portfolio(ER,COV)
GMVPort
GMVPort = globalMin.portfolio(ER,COV, shorts = FALSE)
GMVPort
table.Stats(r)
efrontier <- efficient.frontier(ER, COV, nport = 100,
alpha.min = -0.5,
alpha.max = 1.5, shorts = FALSE )
plot(efrontier, plot.assets=TRUE, col="blue")
port100= cbind (efrontier[[2]],efrontier[[3]],efrontier[[4]])
# We change the name of the columns
colnames(port100)[1] <- "ER"
colnames(port100)[2] <- "SD"
port100
rfree = 0
optPort = tangency.portfolio(ER, COV,rfree, shorts=FALSE)
optPort
plot(efrontier, plot.assets=TRUE, col="blue", pch=16)
points(GMVPort$sd, GMVPort$er, col="green", pch=16, cex=2)
points(optPort$sd, optPort$er, col="red", pch=16, cex=2)
text(GMVPort$sd, GMVPort$er, labels="GLOBAL MIN", pos=2)
text(optPort$sd, optPort$er, labels="TANGENCY", pos=2)
SharpeRatio = (optPort$er - rfree)/optPort$sd
abline(a=rfree, b=SharpeRatio, col="green", lwd=2)
#matrix to data frame
Matdf =as.data.frame(port100)
conseport<-Matdf%>%
filter(conseport$SD<0.1)
conseport<-Matdf%>%
filter(conseport$SD<0.1)
conseport<-Matdf%>%
filter(conseport$SD<0.1)
data_frame_mod <- data_frame[data_frame$col3==TRUE,]
data_frame_mod <- data_frame[data_frame$col3==TRUE,]
data_frame_mod <- data_frame[data_frame$col3==TRUE,]
conseport<- Matdf[Matdf$ER<0.1]
conseport<- Matdf[conseport$ER<0.1]
conseport<- Matdf[Matdf$ER<0.1]
filter(Matdf, ER <0.1 )
filter(Matdf, ER <0.01 )
conseport<- Matdf[Matdf$ER<0.1]
conseport<-Matdf%>%
filter(conseport$SD<0.1)
aggport<-Matdf%>%
filter(SD<0.4)
head(aggport, n=1)
conseport<-Matdf%>%
filter(SD<0.1)
head(conseport, n=1)
conseport<-Matdf%>%
conseport<-conseport%>%
filter(SD<0.1)
conseport<-Matdf%>%
conseport%>%
filter(SD<0.1)
conseport<-Matdf%>%
conseport
conseport<-Matdf%>%
filter(SD<0.1)
head(conseport, n=1)
exp(.67)
exp(67)
exp(67%)
View(JNJ)
